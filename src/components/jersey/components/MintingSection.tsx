'use client'

import React from 'react'
import { Wallet, Zap, Settings } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { IPFSService } from '../../../lib/services/ipfs-service'

interface MintingSectionProps {
  // Estados que precisam ser passados do componente pai
  isConnected: boolean
  isOnSupportedChain: boolean
  address: string | undefined
  chainId: number | undefined
  generatedImage: string | null
  generatedImageBlob: Blob | null
  selectedTeam: string
  playerName: string
  playerNumber: string
  selectedStyle: string
  isUserAdmin: boolean
  
  // Estados de minting que vamos gerenciar
  isMinting: boolean
  setIsMinting: (minting: boolean) => void
  mintError: string | null
  setMintError: (error: string | null) => void
  mintSuccess: string | null
  setMintSuccess: (success: string | null) => void
  mintedTokenId: string | null
  setMintedTokenId: (tokenId: string | null) => void
  mintStatus: 'idle' | 'pending' | 'success' | 'error'
  setMintStatus: (status: 'idle' | 'pending' | 'success' | 'error') => void
  
  // Funções dos hooks
  setClaimConditions: () => Promise<any>
  mintGasless: (params: { to: string; metadataUri: string; chainId: number }) => Promise<any>
  mintNFTWithMetadata: (name: string, description: string, imageBlob: Blob, attributes: any) => Promise<any>
}

export default function MintingSection({
  isConnected,
  isOnSupportedChain,
  address,
  chainId,
  generatedImage,
  generatedImageBlob,
  selectedTeam,
  playerName,
  playerNumber,
  selectedStyle,
  isUserAdmin,
  isMinting,
  setIsMinting,
  mintError,
  setMintError,
  mintSuccess,
  setMintSuccess,
  mintedTokenId,
  setMintedTokenId,
  mintStatus,
  setMintStatus,
  setClaimConditions,
  mintGasless,
  mintNFTWithMetadata,
}: MintingSectionProps) {

  // Mint conditions
  const canMintLegacy = isConnected && isOnSupportedChain && generatedImage // Legacy needs wallet
  const canMintGasless = generatedImage && selectedTeam && playerName && playerNumber && isUserAdmin // Gasless only for admins

  // ===== MINTING FUNCTIONS ===== (copiado exatamente do original)

  // Function to configure Claim Conditions (Admin)
  const handleSetClaimConditions = async () => {
    if (!isConnected) {
      setMintError('Connect wallet first')
      return
    }

    setIsMinting(true)
    setMintError(null)
    setMintSuccess(null)

    try {
      console.log('🔧 Admin setting claim conditions...')
      const result = await setClaimConditions()
      console.log('✅ Claim conditions set:', result)
      setMintSuccess('Claim conditions set! Now users can mint NFTs.')
      
      setTimeout(() => setMintSuccess(null), 8000)
    } catch (error: any) {
      console.error('❌ Set claim conditions failed:', error)
      setMintError(error instanceof Error ? error.message : 'Set claim conditions failed')
      setTimeout(() => setMintError(null), 8000)
    } finally {
      setIsMinting(false)
    }
  }

  // ⚡ ENGINE NORMAL MINT - Backend pays gas, user receives NFT
  const handleEngineNormalMint = async () => {
    if (!generatedImageBlob || !selectedTeam || !playerName || !playerNumber) {
      setMintError('Missing required data for minting')
      return
    }

    if (!address) {
      setMintError('Connect wallet first to receive NFT')
      return
    }

    setIsMinting(true)
    setMintError(null)
    setMintSuccess(null)

    try {
      const nftName = `${selectedTeam} ${playerName} #${playerNumber}`
      const nftDescription = `AI-generated ${selectedTeam} jersey for ${playerName} #${playerNumber}. Style: ${selectedStyle}. Generated by AI Sports NFT Generator.`

      console.log('⚡ ENGINE NORMAL: Starting normal mint process...')

      // 1. Upload image and metadata to IPFS first
      const ipfsResult = await IPFSService.uploadComplete(
        generatedImageBlob,
        nftName,
        nftDescription,
        selectedTeam,
        selectedStyle,
        playerName,
        playerNumber
      );

      console.log('✅ IPFS upload completed:', ipfsResult.metadataUrl);

      // 2. Call the Engine API with the metadata URI
      const result = await mintGasless({
        to: address,
        metadataUri: ipfsResult.metadataUrl,
        chainId: chainId || 80002, // Adding chainId with fallback
      });

      // 3. Update UI with queue ID
      setMintSuccess(`Transaction sent! Queue ID: ${result.queueId}`);
      setMintedTokenId(result.queueId || null);
      
    } catch (error: any) {
      console.error('❌ ENGINE MINT (GASLESS): Mint failed:', error)
      setMintError(error instanceof Error ? error.message : 'Engine Mint (Gasless) failed')
      setMintStatus('error');
      
      setTimeout(() => {
        setMintError(null);
        setMintStatus('idle');
      }, 10000)
    } finally {
      setIsMinting(false)
    }
  }

  const handleMintNFT = async () => {
    if (!generatedImageBlob || !selectedTeam || !playerName || !playerNumber) {
      setMintError('Missing required data for minting')
      return
    }

    setIsMinting(true)
    setMintError(null)
    setMintSuccess(null)

    try {
      const nftName = `${selectedTeam} ${playerName} #${playerNumber}`
      const nftDescription = `AI-generated ${selectedTeam} jersey for ${playerName} #${playerNumber}. Style: ${selectedStyle}. Generated by AI Sports NFT Generator.`
      
      const attributes = [
        { trait_type: 'Team', value: selectedTeam },
        { trait_type: 'Player', value: playerName },
        { trait_type: 'Number', value: playerNumber },
        { trait_type: 'Style', value: selectedStyle },
        { trait_type: 'Generator', value: 'AI Sports NFT' }
      ]

      const result = await mintNFTWithMetadata(
        nftName,
        nftDescription,
        generatedImageBlob,
        attributes
      )

      if (result?.tokenId) {
        setMintSuccess(`NFT minted successfully! Token ID: ${result.tokenId}`)
        setMintedTokenId(result.tokenId.toString())
        
        // Save to database
        const updateResponse = await fetch('/api/jerseys/update-mint-status', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            tokenId: result.tokenId.toString(),
            contractAddress: result.contractAddress,
            transactionHash: result.transactionHash,
            status: 'minted',
            metadata: {
              name: nftName,
              description: nftDescription,
              attributes
            }
          })
        })

        if (!updateResponse.ok) {
          console.warn('Failed to update database, but NFT was minted successfully')
        }
      }
      
      setTimeout(() => setMintSuccess(null), 10000)
    } catch (error: any) {
      console.error('❌ Mint failed:', error)
      setMintError(error instanceof Error ? error.message : 'Mint failed')
      setTimeout(() => setMintError(null), 8000)
    } finally {
      setIsMinting(false)
    }
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">Minting Options</h3>
      
      {/* Admin Only - Set Claim Conditions */}
      {isUserAdmin && (
        <div className="border rounded-lg p-4 bg-blue-50">
          <h4 className="font-medium mb-2">Admin Actions</h4>
          <Button
            onClick={handleSetClaimConditions}
            disabled={isMinting || !isConnected}
            variant="outline"
            className="w-full"
          >
            <Settings className="w-4 h-4 mr-2" />
            Set Claim Conditions
          </Button>
        </div>
      )}

      {/* Gasless Minting (Admin Only) */}
      {isUserAdmin && (
        <div className="border rounded-lg p-4 bg-green-50">
          <h4 className="font-medium mb-2">Gasless Minting (Admin)</h4>
          <p className="text-sm text-gray-600 mb-3">Backend pays gas, user receives NFT</p>
          <Button
            onClick={handleEngineNormalMint}
            disabled={isMinting || !canMintGasless}
            className="w-full"
          >
            <Zap className="w-4 h-4 mr-2" />
            Mint NFT (Gasless)
          </Button>
        </div>
      )}

      {/* Legacy Minting */}
      <div className="border rounded-lg p-4">
        <h4 className="font-medium mb-2">Standard Minting</h4>
        <p className="text-sm text-gray-600 mb-3">User pays gas fees</p>
        <Button
          onClick={handleMintNFT}
          disabled={isMinting || !canMintLegacy}
          variant="outline"
          className="w-full"
        >
          <Wallet className="w-4 h-4 mr-2" />
          Mint NFT (Pay Gas)
        </Button>
      </div>

      {/* Status Messages */}
      {mintError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-3">
          <p className="text-red-700 text-sm">{mintError}</p>
        </div>
      )}

      {mintSuccess && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-3">
          <p className="text-green-700 text-sm">{mintSuccess}</p>
        </div>
      )}

      {isMinting && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <p className="text-blue-700 text-sm">Minting in progress...</p>
        </div>
      )}
    </div>
  )
}
