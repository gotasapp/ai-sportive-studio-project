#!/usr/bin/env node

const fetch = require('node-fetch');

// COLOQUE AQUI:
const USER_WALLET = "SEU_ENDERECO_AQUI"; // Seu endere√ßo real
const PRODUCTION_URL = "SUA_URL_VERCEL_AQUI"; // URL do Vercel

async function compareLocalVsProduction() {
  console.log('üîç COMPARANDO LOCAL vs PRODU√á√ÉO');
  console.log('=================================\n');
  
  try {
    console.log('üìã Testando com endere√ßo:', USER_WALLET);
    console.log('üåê URL Produ√ß√£o:', PRODUCTION_URL);
    console.log('üè† URL Local: http://localhost:3000\n');
    
    // 1. BUSCAR DADOS LOCAL
    console.log('üè† STEP 1: Buscando dados LOCAL...');
    const localResponse = await fetch(`http://localhost:3000/api/profile/user-nfts?address=${USER_WALLET}`);
    const localResult = await localResponse.json();
    
    console.log(`‚úÖ Local Status: ${localResponse.status}`);
    console.log(`‚úÖ Local Success: ${localResult.success}`);
    console.log(`‚úÖ Local Source: ${localResult.source}`);
    
    const localNFTs = localResult.success ? (localResult.data.nfts || []) : [];
    console.log(`‚úÖ Local NFTs Count: ${localNFTs.length}\n`);
    
    // 2. BUSCAR DADOS PRODU√á√ÉO
    console.log('üåê STEP 2: Buscando dados PRODU√á√ÉO...');
    const prodResponse = await fetch(`${PRODUCTION_URL}/api/profile/user-nfts?address=${USER_WALLET}`);
    const prodResult = await prodResponse.json();
    
    console.log(`‚úÖ Prod Status: ${prodResponse.status}`);
    console.log(`‚úÖ Prod Success: ${prodResult.success}`);
    console.log(`‚úÖ Prod Source: ${prodResult.source}`);
    
    const prodNFTs = prodResult.success ? (prodResult.data.nfts || []) : [];
    console.log(`‚úÖ Prod NFTs Count: ${prodNFTs.length}\n`);
    
    // 3. COMPARAR NFT POR NFT
    console.log('üîç STEP 3: Comparando NFT por NFT...');
    console.log('=====================================\n');
    
    const maxLength = Math.max(localNFTs.length, prodNFTs.length);
    
    for (let i = 0; i < maxLength; i++) {
      const localNFT = localNFTs[i];
      const prodNFT = prodNFTs[i];
      
      console.log(`üéØ NFT #${i + 1}:`);
      
      if (localNFT && prodNFT) {
        // Ambos existem - comparar
        console.log(`   üìõ Nome: ${localNFT.name} | ${prodNFT.name}`);
        console.log(`   üÜî Token ID: ${localNFT.tokenId} | ${prodNFT.tokenId}`);
        console.log(`   üñºÔ∏è  Image URL:`);
        console.log(`      üè† Local:  ${localNFT.imageUrl || 'VAZIO'}`);
        console.log(`      üåê Prod:   ${prodNFT.imageUrl || 'VAZIO'}`);
        
        const imageMatch = localNFT.imageUrl === prodNFT.imageUrl;
        console.log(`   ‚úÖ Image URLs Match: ${imageMatch ? 'SIM' : 'N√ÉO'}`);
        
        if (!imageMatch) {
          console.log(`   üö® DIFEREN√áA DETECTADA!`);
        }
        
        // Testar acessibilidade das imagens
        if (localNFT.imageUrl) {
          const localImageTest = await testImageAccess(localNFT.imageUrl, 'Local');
          console.log(`   üè† Local Image Access: ${localImageTest ? '‚úÖ' : '‚ùå'}`);
        }
        
        if (prodNFT.imageUrl && prodNFT.imageUrl !== localNFT.imageUrl) {
          const prodImageTest = await testImageAccess(prodNFT.imageUrl, 'Prod');
          console.log(`   üåê Prod Image Access: ${prodImageTest ? '‚úÖ' : '‚ùå'}`);
        }
        
      } else if (localNFT && !prodNFT) {
        console.log(`   üè† Existe apenas LOCAL: ${localNFT.name}`);
        console.log(`   üö® FALTANDO EM PRODU√á√ÉO!`);
      } else if (!localNFT && prodNFT) {
        console.log(`   üåê Existe apenas PRODU√á√ÉO: ${prodNFT.name}`);
        console.log(`   üö® FALTANDO EM LOCAL!`);
      }
      
      console.log(''); // Linha em branco
    }
    
    // 4. RESUMO DAS DIFEREN√áAS
    console.log('üìã STEP 4: Resumo das Diferen√ßas');
    console.log('================================\n');
    
    const localWithImages = localNFTs.filter(nft => nft.imageUrl);
    const localWithoutImages = localNFTs.filter(nft => !nft.imageUrl);
    const prodWithImages = prodNFTs.filter(nft => nft.imageUrl);
    const prodWithoutImages = prodNFTs.filter(nft => !nft.imageUrl);
    
    console.log(`üìä LOCAL: ${localNFTs.length} total, ${localWithImages.length} com imagem, ${localWithoutImages.length} sem imagem`);
    console.log(`üìä PROD:  ${prodNFTs.length} total, ${prodWithImages.length} com imagem, ${prodWithoutImages.length} sem imagem`);
    
    if (localWithoutImages.length > 0) {
      console.log('\nüö® NFTs SEM IMAGEM em LOCAL:');
      localWithoutImages.forEach(nft => {
        console.log(`   - ${nft.name} (Token ID: ${nft.tokenId})`);
      });
    }
    
    if (prodWithoutImages.length > 0) {
      console.log('\nüö® NFTs SEM IMAGEM em PRODU√á√ÉO:');
      prodWithoutImages.forEach(nft => {
        console.log(`   - ${nft.name} (Token ID: ${nft.tokenId})`);
      });
    }
    
    // 5. AN√ÅLISE DOS SOURCES
    console.log('\nüìã STEP 5: An√°lise dos Sources');
    console.log('==============================\n');
    
    console.log(`üè† Local Data Source: ${localResult.source || 'unknown'}`);
    console.log(`üåê Prod Data Source: ${prodResult.source || 'unknown'}`);
    
    if (localResult.source !== prodResult.source) {
      console.log('üö® SOURCES DIFERENTES! Este pode ser o problema.');
      console.log('   Local est√° usando:', localResult.source);
      console.log('   Produ√ß√£o est√° usando:', prodResult.source);
    }
    
  } catch (error) {
    console.error('‚ùå Erro na compara√ß√£o:', error.message);
  }
}

async function testImageAccess(imageUrl, label) {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(imageUrl, {
      method: 'HEAD',
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    return false;
  }
}

// Executar compara√ß√£o
if (!USER_WALLET.includes('SEU_ENDERECO') && !PRODUCTION_URL.includes('SUA_URL')) {
  compareLocalVsProduction();
} else {
  console.log('‚ùå CONFIGURE PRIMEIRO:');
  console.log('1. Substitua USER_WALLET pelo seu endere√ßo real');
  console.log('2. Substitua PRODUCTION_URL pela URL do Vercel');
  console.log('3. Execute: node scripts/debug-production-vs-local.js');
} 