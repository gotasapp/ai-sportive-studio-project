import os
import pymongo
from dotenv import load_dotenv

def migrate_collections():
    """
    Renomeia as cole√ß√µes 'stadium_references' para 'stadium_templates' e
    'badge_references' para 'badge_templates' para alinhar com a nova
    nomenclatura da API, preservando todos os dados existentes.
    """
    # Caminho corrigido para apontar para o .env dentro da pasta /api
    dotenv_path = os.path.join(os.path.dirname(__file__), '..', 'api', '.env')
    load_dotenv(dotenv_path=dotenv_path)

    MONGO_URI = os.getenv("MONGODB_URI")
    DB_NAME = "chz-app-db"

    if not MONGO_URI:
        print("‚ùå ERRO: MONGODB_URI n√£o encontrada no arquivo .env. Abortando a migra√ß√£o.")
        return

    try:
        print("‚öôÔ∏è Conectando ao MongoDB...")
        client = pymongo.MongoClient(MONGO_URI)
        db = client[DB_NAME]
        
        # Ping para confirmar a conex√£o
        client.admin.command('ping')
        print(f"‚úÖ Conex√£o com o banco '{DB_NAME}' estabelecida com sucesso.")

        # --- Migra√ß√£o de Est√°dios ---
        print("\n--- Iniciando Migra√ß√£o de Est√°dios ---")
        collection_names = db.list_collection_names()
        
        # O nome de origem agora √© "stadiums"
        if "stadiums" in collection_names:
            if "stadium_templates" in collection_names:
                print("‚ö†Ô∏è AVISO: A cole√ß√£o 'stadium_templates' j√° existe. Pulando a renomea√ß√£o para evitar perda de dados.")
            else:
                print("‚è≥ Renomeando 'stadiums' para 'stadium_templates'...")
                db["stadiums"].rename("stadium_templates")
                print("‚úÖ SUCESSO: Cole√ß√£o de est√°dios renomeada.")
        else:
            print("‚ÑπÔ∏è INFO: A cole√ß√£o de origem 'stadiums' n√£o foi encontrada. Nenhuma a√ß√£o necess√°ria.")

        # --- Migra√ß√£o de Emblemas ---
        print("\n--- Iniciando Migra√ß√£o de Emblemas ---")
        collection_names = db.list_collection_names() # Atualiza a lista de cole√ß√µes

        # O nome de origem agora √© "badges"
        if "badges" in collection_names:
            if "badge_templates" in collection_names:
                 print("‚ö†Ô∏è AVISO: A cole√ß√£o 'badge_templates' j√° existe. Pulando a renomea√ß√£o para evitar perda de dados.")
            else:
                print("‚è≥ Renomeando 'badges' para 'badge_templates'...")
                db["badges"].rename("badge_templates")
                print("‚úÖ SUCESSO: Cole√ß√£o de emblemas renomeada.")
        else:
             print("‚ÑπÔ∏è INFO: A cole√ß√£o de origem 'badges' n√£o foi encontrada. Nenhuma a√ß√£o necess√°ria.")

        print("\nüéâ Migra√ß√£o conclu√≠da com sucesso!")

    except pymongo.errors.OperationFailure as e:
        print(f"‚ùå ERRO DE OPERA√á√ÉO: Falha ao executar o comando no MongoDB. Verifique as permiss√µes. Erro: {e}")
    except pymongo.errors.ConnectionFailure as e:
        print(f"‚ùå ERRO DE CONEX√ÉO: N√£o foi poss√≠vel conectar ao MongoDB. Verifique a MONGO_URI. Erro: {e}")
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: Ocorreu um erro durante a migra√ß√£o. Erro: {e}")
    finally:
        if 'client' in locals() and client:
            client.close()
            print("\nüîå Conex√£o com o MongoDB fechada.")

if __name__ == "__main__":
    migrate_collections() 